---
description: 
globs: 
alwaysApply: true
---
## Project Overview

This project is built with NextJS 15+ (React 19) as a comprehensive starter template with modern development tools and libraries.

## Tech Stack

- **Framework**: Next.js with App Router
- **Database**: Drizzle ORM + PostgreSQL
- **Authentication**: Auth.js (NextAuth v5)
- **API**: tRPC(v11) + TanStack Query
- **UI**: shadcn/ui + Tailwind CSS(v4)
- **Form Management**: React Hook Form + Zod

## Project Structure

```
src/
├── app/                  # Next.js application routes
│   ├── (landing)/        # Landing page routes
│   ├── (dashboard)/      # Dashboard routes (protected)
│   ├── (auth)/           # Authentication routes
│   ├── api/              # API routes
│   ├── layout.tsx        # Root layout
│   └── globals.css       # Global styles
├── components/           # Reusable components
│   ├── common/           # Common components
│   ├── ui/               # UI components (shadcn/ui)
│   └── icons/            # Icon components
├── auth/                 # Authentication configuration
├── trpc/                 # tRPC setup
│   └── routers/          # tRPC routers and procedures
├── db/                   # Database schema and configuration
├── services/             # Service layer
├── lib/                  # Utility functions
├── hooks/                # Custom React hooks
├── configs/              # Configuration files
└── middleware.ts         # Next.js middleware for auth protection
```

## Coding Conventions

### Component Organization
1. **Global Components**: Located in `src/components/` for application-wide reuse
2. **Route-specific Components**: Should be placed in `_components/` folders within respective route directories

### Using shadcn/ui Components
```tsx
// Component usage example
import { Button } from "@/components/ui/button";

export function Component() {
  return (
    <Button variant="outline" size="lg">
      Button Text
    </Button>
  );
}
```

### tRPC API Pattern
- Define routers and procedures in `src/trpc/routers/`
```tsx
// tRPC usage example
import { useQuery } from '@tanstack/react-query';
import { useTRPC } from './trpc';
function Users() {
  const trpc = useTRPC();
  const greetingQuery = useQuery(trpc.greeting.queryOptions({ name: 'Jerry' }));
  // greetingQuery.data === 'Hello Jerry'
}
```

### Authentication
- Using Auth.js (NextAuth v5)
- Protected routes in the `(dashboard)` group
- Route protection via middleware

### Form Handling
- Implement type-safe forms with React Hook Form + Zod validation

## Authentication Flow

The middleware.ts file protects specific routes (like `/dashboard`) from unauthorized access. Users who are not logged in will be redirected to the sign-in page.

## Development Commands
- Development server: `npm run dev` or `bun run dev`
- Production build: `npm run build` or `bun run build`
